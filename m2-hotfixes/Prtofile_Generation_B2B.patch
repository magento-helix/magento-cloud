diff --git a/setup/src/Magento/Setup/Fixtures/OrdersFixture.php b/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
index 1acad6dbc17..25ea94b8a0c 100644
--- a/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
+++ b/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
@@ -583,7 +583,6 @@ class OrdersFixture extends Fixture
         // "Big%" should be replaced with a configurable value.
         if ($typeId === self::BIG_CONFIGURABLE_TYPE) {
             $productCollection->getSelect()->where(" type_id = '" . Configurable::TYPE_CODE . "' ");
-            $productCollection->getSelect()->where(" sku LIKE 'Big%' ");
         } else {
             $productCollection->getSelect()->where(" type_id = '$typeId' ");
             $productCollection->getSelect()->where(" sku NOT LIKE 'Big%' ");
diff --git a/setup/src/Magento/Setup/Model/FixtureGenerator/CustomerTemplateGenerator.php b/setup/src/Magento/Setup/Model/FixtureGenerator/CustomerTemplateGenerator.php
index 5c43950d49b..054c7bf8d0c 100644
--- a/setup/src/Magento/Setup/Model/FixtureGenerator/CustomerTemplateGenerator.php
+++ b/setup/src/Magento/Setup/Model/FixtureGenerator/CustomerTemplateGenerator.php
@@ -10,6 +10,7 @@ use Magento\Customer\Model\Address;
 use Magento\Customer\Model\AddressFactory;
 use Magento\Customer\Model\Customer;
 use Magento\Customer\Model\CustomerFactory;
+use Magento\Directory\Model\ResourceModel\Region\CollectionFactory;
 use Magento\Store\Model\StoreManagerInterface;

 /**
@@ -32,19 +33,27 @@ class CustomerTemplateGenerator implements TemplateEntityGeneratorInterface
      */
     private $storeManager;

+    /**
+     * @var CollectionFactory
+     */
+    private $regionsCollectionFactory;
+
     /**
      * @param CustomerFactory $customerFactory
      * @param AddressFactory $addressFactory
      * @param StoreManagerInterface $storeManager
+     * @param CollectionFactory $regionsCollectionFactory
      */
     public function __construct(
         CustomerFactory $customerFactory,
         AddressFactory $addressFactory,
-        StoreManagerInterface $storeManager
+        StoreManagerInterface $storeManager,
+        CollectionFactory $regionsCollectionFactory
     ) {
         $this->customerFactory = $customerFactory;
         $this->addressFactory = $addressFactory;
         $this->storeManager = $storeManager;
+        $this->regionsCollectionFactory = $regionsCollectionFactory;
     }

     /**
@@ -105,6 +114,11 @@ class CustomerTemplateGenerator implements TemplateEntityGeneratorInterface
      */
     private function getAddressTemplate($customerId)
     {
+
+        $regionsCollection = $this->regionsCollectionFactory->create();
+        $regionsCollection->unshiftOrder('region_id', 'ASC');
+        $region = $regionsCollection->getFirstItem();
+
         return $this->addressFactory->create([
             'data' => [
                 'parent_id' => $customerId,
@@ -117,11 +131,11 @@ class CustomerTemplateGenerator implements TemplateEntityGeneratorInterface
                 'street' => 'Green str, 67',
                 'lastname' => 'Smith',
                 'firstname' => 'John',
-                'region_id' => 1,
+                'region_id' => $region->getId(),
                 'fax' => '04040404',
                 'middlename' => '',
                 'prefix' => '',
-                'region' => 'Arkansas',
+                'region' => $region->getCode(),
                 'suffix' => '',
                 'vat_id' => '',
                 'default_billing_' => '1',
diff --git a/vendor/magento/module-cron/Observer/ProcessCronQueueObserver.php b/vendor/magento/module-cron/Observer/ProcessCronQueueObserver.php
index 6b0c405167a..9a194476a42 100644
--- a/app/code/Magento/Cron/Observer/ProcessCronQueueObserver.php
+++ b/app/code/Magento/Cron/Observer/ProcessCronQueueObserver.php
@@ -13,6 +13,7 @@ use Magento\Framework\App\State;
 use Magento\Framework\Console\Cli;
 use Magento\Framework\Event\ObserverInterface;
 use \Magento\Cron\Model\Schedule;
+use Magento\Framework\App\MaintenanceMode;

 /**
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
@@ -126,6 +127,11 @@ class ProcessCronQueueObserver implements ObserverInterface
      */
     private $jobs;

+    /**
+     * @var MaintenanceMode
+     */
+    private $maintenanceMode;
+
     /**
      * @param \Magento\Framework\ObjectManagerInterface $objectManager
      * @param \Magento\Cron\Model\ScheduleFactory $scheduleFactory
@@ -138,6 +144,7 @@ class ProcessCronQueueObserver implements ObserverInterface
      * @param \Magento\Framework\Process\PhpExecutableFinderFactory $phpExecutableFinderFactory
      * @param \Psr\Log\LoggerInterface $logger
      * @param \Magento\Framework\App\State $state
+     * @param MaintenanceMode $maintenanceMode
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
     public function __construct(
@@ -151,7 +158,8 @@ class ProcessCronQueueObserver implements ObserverInterface
         \Magento\Framework\Stdlib\DateTime\DateTime $dateTime,
         \Magento\Framework\Process\PhpExecutableFinderFactory $phpExecutableFinderFactory,
         \Psr\Log\LoggerInterface $logger,
-        \Magento\Framework\App\State $state
+        \Magento\Framework\App\State $state,
+        MaintenanceMode $maintenanceMode = null
     ) {
         $this->_objectManager = $objectManager;
         $this->_scheduleFactory = $scheduleFactory;
@@ -164,6 +172,7 @@ class ProcessCronQueueObserver implements ObserverInterface
         $this->phpExecutableFinder = $phpExecutableFinderFactory->create();
         $this->logger = $logger;
         $this->state = $state;
+        $this->maintenanceMode = $maintenanceMode ?: $objectManager->get(MaintenanceMode::class);
     }

     /**
@@ -186,8 +195,10 @@ class ProcessCronQueueObserver implements ObserverInterface
         $phpPath = $this->phpExecutableFinder->find() ?: 'php';

         foreach ($jobGroupsRoot as $groupId => $jobsRoot) {
-            $this->_cleanup($groupId);
-            $this->_generate($groupId);
+            if (!$this->maintenanceMode->isOn()) {
+                $this->_cleanup($groupId);
+                $this->_generate($groupId);
+            }
             if ($this->_request->getParam('group') !== null
                 && $this->_request->getParam('group') !== '\'' . ($groupId) . '\''
                 && $this->_request->getParam('group') !== $groupId
@@ -218,6 +229,19 @@ class ProcessCronQueueObserver implements ObserverInterface
                     continue;
                 }

+                if ($this->maintenanceMode->isOn()) {
+
+                    $newScheduledTime = $currentTime + max(
+                            static::SECONDS_IN_MINUTE,
+                            $this->getScheduleLifeTime($groupId)
+                        );
+
+                    $schedule->setScheduledAt(strftime('%Y-%m-%d %H:%M:%S', $newScheduledTime));
+                    $schedule->getResource()->save($schedule);
+
+                    continue;
+                }
+
                 $scheduledTime = strtotime($schedule->getScheduledAt());
                 if ($scheduledTime > $currentTime) {
                     continue;
@@ -263,11 +287,7 @@ class ProcessCronQueueObserver implements ObserverInterface
      */
     protected function _runJob($scheduledTime, $currentTime, $jobConfig, $schedule, $groupId)
     {
-        $scheduleLifetime = (int)$this->_scopeConfig->getValue(
-            'system/cron/' . $groupId . '/' . self::XML_PATH_SCHEDULE_LIFETIME,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
-        );
-        $scheduleLifetime = $scheduleLifetime * self::SECONDS_IN_MINUTE;
+        $scheduleLifetime = $this->getScheduleLifeTime($groupId);
         if ($scheduledTime < $currentTime - $scheduleLifetime) {
             $schedule->setStatus(Schedule::STATUS_MISSED);
             throw new \Exception('Too late for the schedule');
@@ -308,6 +328,16 @@ class ProcessCronQueueObserver implements ObserverInterface
         ));
     }

+    private function getScheduleLifeTime($groupId)
+    {
+        $scheduleLifetime = (int)$this->_scopeConfig->getValue(
+            'system/cron/' . $groupId . '/' . self::XML_PATH_SCHEDULE_LIFETIME,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
+        );
+
+        return $scheduleLifetime * self::SECONDS_IN_MINUTE;
+    }
+
     /**
      * Return job collection from data base with status 'pending'
      *

