diff --git a/setup/src/Magento/Setup/Fixtures/OrdersFixture.php b/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
index 1acad6dbc17..25ea94b8a0c 100644
--- a/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
+++ b/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
@@ -583,7 +583,6 @@ class OrdersFixture extends Fixture
         // "Big%" should be replaced with a configurable value.
         if ($typeId === self::BIG_CONFIGURABLE_TYPE) {
             $productCollection->getSelect()->where(" type_id = '" . Configurable::TYPE_CODE . "' ");
-            $productCollection->getSelect()->where(" sku LIKE 'Big%' ");
         } else {
             $productCollection->getSelect()->where(" type_id = '$typeId' ");
             $productCollection->getSelect()->where(" sku NOT LIKE 'Big%' ");
diff --git a/setup/src/Magento/Setup/Model/FixtureGenerator/CustomerTemplateGenerator.php b/setup/src/Magento/Setup/Model/FixtureGenerator/CustomerTemplateGenerator.php
index 5c43950d49b..054c7bf8d0c 100644
--- a/setup/src/Magento/Setup/Model/FixtureGenerator/CustomerTemplateGenerator.php
+++ b/setup/src/Magento/Setup/Model/FixtureGenerator/CustomerTemplateGenerator.php
@@ -10,6 +10,7 @@ use Magento\Customer\Model\Address;
 use Magento\Customer\Model\AddressFactory;
 use Magento\Customer\Model\Customer;
 use Magento\Customer\Model\CustomerFactory;
+use Magento\Directory\Model\ResourceModel\Region\CollectionFactory;
 use Magento\Store\Model\StoreManagerInterface;

 /**
@@ -32,19 +33,27 @@ class CustomerTemplateGenerator implements TemplateEntityGeneratorInterface
      */
     private $storeManager;

+    /**
+     * @var CollectionFactory
+     */
+    private $regionsCollectionFactory;
+
     /**
      * @param CustomerFactory $customerFactory
      * @param AddressFactory $addressFactory
      * @param StoreManagerInterface $storeManager
+     * @param CollectionFactory $regionsCollectionFactory
      */
     public function __construct(
         CustomerFactory $customerFactory,
         AddressFactory $addressFactory,
-        StoreManagerInterface $storeManager
+        StoreManagerInterface $storeManager,
+        CollectionFactory $regionsCollectionFactory
     ) {
         $this->customerFactory = $customerFactory;
         $this->addressFactory = $addressFactory;
         $this->storeManager = $storeManager;
+        $this->regionsCollectionFactory = $regionsCollectionFactory;
     }

     /**
@@ -105,6 +114,11 @@ class CustomerTemplateGenerator implements TemplateEntityGeneratorInterface
      */
     private function getAddressTemplate($customerId)
     {
+
+        $regionsCollection = $this->regionsCollectionFactory->create();
+        $regionsCollection->unshiftOrder('region_id', 'ASC');
+        $region = $regionsCollection->getFirstItem();
+
         return $this->addressFactory->create([
             'data' => [
                 'parent_id' => $customerId,
@@ -117,11 +131,11 @@ class CustomerTemplateGenerator implements TemplateEntityGeneratorInterface
                 'street' => 'Green str, 67',
                 'lastname' => 'Smith',
                 'firstname' => 'John',
-                'region_id' => 1,
+                'region_id' => $region->getId(),
                 'fax' => '04040404',
                 'middlename' => '',
                 'prefix' => '',
-                'region' => 'Arkansas',
+                'region' => $region->getCode(),
                 'suffix' => '',
                 'vat_id' => '',
                 'default_billing_' => '1',
diff --git a/vendor/magento/module-cron/Observer/ProcessCronQueueObserver.php b/vendor/magento/module-cron/Observer/ProcessCronQueueObserver.php
index 6b0c405167a..9a194476a42 100644
--- a/vendor/magento/module-cron/Observer/ProcessCronQueueObserver.php
+++ b/vendor/magento/module-cron/Observer/ProcessCronQueueObserver.php
@@ -15,6 +15,7 @@ use Magento\Framework\Event\ObserverInterface;
 use \Magento\Cron\Model\Schedule;
 use Magento\Framework\Profiler\Driver\Standard\Stat;
 use Magento\Framework\Profiler\Driver\Standard\StatFactory;
+use Magento\Framework\App\MaintenanceMode;

 /**
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
@@ -134,6 +135,11 @@ class ProcessCronQueueObserver implements ObserverInterface
     private $statProfiler;

     /**
+     * @var MaintenanceMode
+     */
+    private $maintenanceMode;
+
+    /**
      * @param \Magento\Framework\ObjectManagerInterface $objectManager
      * @param \Magento\Cron\Model\ScheduleFactory $scheduleFactory
      * @param \Magento\Framework\App\CacheInterface $cache
@@ -146,6 +152,7 @@ class ProcessCronQueueObserver implements ObserverInterface
      * @param \Psr\Log\LoggerInterface $logger
      * @param \Magento\Framework\App\State $state
      * @param StatFactory $statFactory
+     * @param MaintenanceMode $maintenanceMode
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
     public function __construct(
@@ -160,7 +167,8 @@ class ProcessCronQueueObserver implements ObserverInterface
         \Magento\Framework\Process\PhpExecutableFinderFactory $phpExecutableFinderFactory,
         \Psr\Log\LoggerInterface $logger,
         \Magento\Framework\App\State $state,
-        StatFactory $statFactory
+        StatFactory $statFactory,
+        MaintenanceMode $maintenanceMode = null
     ) {
         $this->_objectManager = $objectManager;
         $this->_scheduleFactory = $scheduleFactory;
@@ -174,6 +182,7 @@ class ProcessCronQueueObserver implements ObserverInterface
         $this->logger = $logger;
         $this->state = $state;
         $this->statProfiler = $statFactory->create();
+        $this->maintenanceMode = $maintenanceMode ?: $objectManager->get(MaintenanceMode::class);
     }

     /**
@@ -207,6 +216,8 @@ class ProcessCronQueueObserver implements ObserverInterface
             if (!$this->isGroupInFilter($groupId)) {
                 continue;
             }
+
+
             if ($this->_request->getParam(self::STANDALONE_PROCESS_STARTED) !== '1'
                 && $this->getCronGroupConfigurationValue($groupId, 'use_separate_process') == 1
             ) {
@@ -220,9 +231,11 @@ class ProcessCronQueueObserver implements ObserverInterface
                 continue;
             }

-            $this->cleanupJobs($groupId, $currentTime);
-            $this->generateSchedules($groupId);
-            $this->processPendingJobs($groupId, $jobsRoot, $currentTime);
+            if (!$this->maintenanceMode->isOn()) {
+                $this->cleanupJobs($groupId, $currentTime);
+                $this->generateSchedules($groupId);
+                $this->processPendingJobs($groupId, $jobsRoot, $currentTime);
+            }
         }
     }

@@ -241,7 +254,7 @@ class ProcessCronQueueObserver implements ObserverInterface
     {
         $jobCode = $schedule->getJobCode();
         $scheduleLifetime = $this->getCronGroupConfigurationValue($groupId, self::XML_PATH_SCHEDULE_LIFETIME);
-        $scheduleLifetime = $scheduleLifetime * self::SECONDS_IN_MINUTE;
+        $scheduleLifetime = $this->getScheduleLifeTime($groupId);
         if ($scheduledTime < $currentTime - $scheduleLifetime) {
             $schedule->setStatus(Schedule::STATUS_MISSED);
             $this->logger->info(sprintf('Cron Job %s is missed', $jobCode));
@@ -302,6 +315,17 @@ class ProcessCronQueueObserver implements ObserverInterface
         ));
     }

+    private function getScheduleLifeTime($groupId)
+    {
+        $scheduleLifetime = (int)$this->_scopeConfig->getValue(
+            'system/cron/' . $groupId . '/' . self::XML_PATH_SCHEDULE_LIFETIME,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
+        );
+
+        return $scheduleLifetime * self::SECONDS_IN_MINUTE;
+    }
+
+
     /**
      * Starts profiling
      *
@@ -679,6 +703,18 @@ class ProcessCronQueueObserver implements ObserverInterface
             if (!$jobConfig) {
                 continue;
             }
+            if ($this->maintenanceMode->isOn()) {
+
+                $newScheduledTime = $currentTime + max(
+                        static::SECONDS_IN_MINUTE,
+                        $this->getScheduleLifeTime($groupId)
+                    );
+
+                $schedule->setScheduledAt(strftime('%Y-%m-%d %H:%M:%S', $newScheduledTime));
+                $schedule->getResource()->save($schedule);
+
+                continue;
+            }

             $scheduledTime = strtotime($schedule->getScheduledAt());
             if ($scheduledTime > $currentTime) {
diff --git a/setup/src/Magento/Setup/Fixtures/OrdersFixture.php b/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
index 1acad6dbc17..9c6ba8a7828 100644
--- a/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
+++ b/setup/src/Magento/Setup/Fixtures/OrdersFixture.php
@@ -49,7 +49,7 @@ class OrdersFixture extends Fixture
      *
      * @var string
      */
-    const BATCH_SIZE = 1000;
+    const BATCH_SIZE = 100;

     /**
      * Product type for "big" configurable products.
